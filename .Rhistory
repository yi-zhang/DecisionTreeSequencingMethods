source("main.R")
main(3,4)
main(3,4)
source("main.R")
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(2,4)
source("main.R")
main(2,4)
search_term <- read.csv(con)[,3:4]
length(search_term)
search_term
con <-file("sequencing_methods.csv")
search_term <- read.csv(con)[,3:4]
search_term
source("main.R")
main(2,4)
source("main.R")
main(2,4)
main(2,4)
source("main.R")
main(2,4)
source("main.R")
main(2,4)
source("main.R")
main(2,4)
print('')
print(' ')
print()
print
print'____'
print('_____')
print('hall')
source("main.R")
main(2,4)
source("main.R")
main(2,4)
main(2,4)
main(2,4)
main(2,4)
main(2,4)
main(1,4)
write.csv(jcount1, "journal_distribution.csv")
View(mydata)
View(mydata1)
read.csv('analysis.csv')
Analysis <- read.csv("~/DecisionTreeSequencingMethods/Analysis.csv")
View(Analysis)
View(Analysis)
gsub('\\(', '', Analysis$Journal)
rankedJournals<-read.csv(con)[, c(1,2,3,5)]
con <-"2014_SCI_IF.csv"
a<-rankedJournals[,2]
rankedJournals<-read.csv(con)[, c(1,2,3,5)]
a<-rankedJournals[,2]
a[1:10]
b<-data.frame(lappply(a[1:10], function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b<-data.frame(lapply(a[1:10], function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a
a[1:10]
b
a<-c("HHHH")
b<-data.frame(lapply(a[1:10], function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a<-rankedJournals[,2]
a(1:10)
a
a(c(1:10))
a[[1:10]]
a[1:10]
class(a)
a<-c(a[1:10])
a
as.character(a[1:10])
a
a<-rankedJournals[,2]
a
as.character(a[1:10])
a<-rankedJournals[,2]
df<-mutate_each(rankedJournals[,2], funs(toupper))
b<-data.frame(lapply(as.character(a[1:10]), function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a
b
toupper()
a<-rankedJournals[,2]
b<-data.frame(lapply(as.character(a[1:10]), function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a<-rankedJournals[,2]
b<-data.frame(lapply(as.character(a[1:10]), function(v) {
if (is.character(v)) return(tolower(v))
else return(v)
}))
b
a
a[1:20]
a<-as.character(rankedJournals[,2])
c<-lapply(a, tolower())
c<-lapply(a, tolower(x))
c<-lapply(a, tolower
c<-lapply(a, tolower)
c
a<-as.character(rankedJournals[,2])
c<-lapply(a, tolower)
z
a
b<-rankedJournals
b[,2]<-tolower(as.character(b[,2]))
b
header(b)
head(b)
b[,2]<-tolower(as.character(b[,2]))
b[,2]
analysis <- read.csv("~/DecisionTreeSequencingMethods/analysis.csv")
View(analysis)
a<-read.csv("analysis.csv")
View(analysis)
a[,4]<-tolower(as.character(a[,4]))
head(a)
library(plyr)
head(b)
head(a)
head(b)
names(b[c(2)])
names(b[c(2)])<-Journal
names(b[c(2)])<-"Journal"
head(b)
names(b[c(2)])<-"Journal"
head(b)
names(b[c(2)])
colnames(b[c(2)])
colnames(b[c(2)])<-"Journal"
colnames(b[c(2)])
colnames(b)
colnames(b)[2]
colnames(b)[2]<-"Journal"
colnames(b)[2]
arrange(join(a,b), Journal)
test<-arrange(join(a,b), Journal)
View(test)
names(test)
test<-test([,c(1,4,10,11,9,5,2,3,6,7,8)])
test<-test[,c(1,4,10,11,9,5,2,3,6,7,8)]
test<-arrange(test, desc(Journal.Impact.Factor))
test
View(test)
View(test)
View(test)
b<-rankedJournals
b[,2]<-tolower(as.character(b[,2]))
colnames(b)[2]<-"Journal"
a<-read.csv("analysis.csv")
a[,4]<-tolower(as.character(a[,4]))
mydata_merged<-arrange(join(a,b), Journal)
mydata_merged<-mydata_merged[,c(1,4,10,11,9,5,2,3,6,7,8)]
test<-test[,c(1,4,10,11,9,5,2,3,6,7,8)]
cat("nature methods", mydata_merged)
write.csv2(mydata_merged, "analysis_merged.csv")
View(b)
b<-arrange(b, asc(Journal))
b<-arrange(b, Journal)
a<-arrange(a, Journal)
View(a)
View(b)
View(mydata_merged)
main(1,3)
source("main.r")
main(1,3)
main(2,3)
ngs_search <- EUtilsSummary(query, type="esearch",db = "pubmed",mindate=2000, maxdate=2015, retmax=30000)
search_term <- read.csv(con)[start:en,3:4]
start<-2
end<-3
search_term <- read.csv(con)[start:en,3:4]
en<-3
search_term <- read.csv(con)[start:en,3:4]
# loops through the search terms.
for (n in seq_along(search_term[,1])) {
# Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
}
print("end retrieving search terms")
}
con <-file("sequencing_methods.csv")
start<-2
en<-3
search_term <- read.csv(con)[start:en,3:4]
# loops through the search terms.
for (n in seq_along(search_term[,1])) {
# Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
}
print("end retrieving search terms")
}
print("end PubMed search")
}
query <- SearchExpression
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
query <- SearchExpression
search_term <- read.csv(con)[start:en,3:4]
start<-2
en<-3
search_term <- read.csv(con)[start:en,3:4]
View(search_term)
library(RISmed)
library(dplyr)
# Retrievs method and search term from sequence_methods.csv using rownumbers start and end.
print("========>>>>  retrieving search terms from sequencing_methods.csv")
con <-file("sequencing_methods.csv")
start<-2
en<-3
search_term <- read.csv(con)[start:en,3:4]
query<-reChip-seq
ngs_search <- EUtilsSummary(query, type="esearch",db = "pubmed",mindate=2000, maxdate=2015, retmax=30000)
query<-"reChip-seq"
ngs_search <- EUtilsSummary(query, type="esearch",db = "pubmed",mindate=2000, maxdate=2015, retmax=30000)
QueryCount(ngs_search)
print (paste0(Sys.time(),':   ', QueryCount(ngs_search),' hits'))
ngs_records <- EUtilsGet(ngs_search)
YearPubmed(ngs_records)
MedlienTA(ngs_records)
MedlineTA(ngs_records)
Medline(ngs_records)
Volume(ngs_records)
ngs_records
Title(ngs_records)
MedlineTA(ngs_records)
main(1,5)
source("main.R")
main(1,5)
main(2,4)
main(3,4)
main(3,4)
source("main.R")
main(3,4)
main(1,4)
main(3,4)
main(3,4)
main(2,20)
main(12,20)
main(19,20)
main(20,30)
install.packages("snowball")
install.packages("snowball")
install.packages("snowball")
install.packages("knit")
install.packages("knitr")
install.packages("snowballC")
install.packages("SnowballC")
install.packages("RWeka")
library(tm)
library(RWeka)
library(SnowballC)
mydata<-read.csv("paper_collection.csv")
myCorpus<-Corpus(VectorSource(mydata$Abstract))
### transformations
## lower case
myCorpus<-tm_map(myCorpus, tolower)
## remove punctuation
myCorpus <-tm_map(myCorpus, removePunctuation)
## remove numbers
myCorpus <-tm_map(myCorpus, removeNumbers)
## In many cases, workds need to be stemmed to retrieve their radicals.
dictCorpus<-myCorpus
myCorpus<-tm_map(myCorpus,stemDocument)
inspect(myCorpus[1:3])
# stem completion
myCorpus <-tm_map(myCorpus, stemCompletion, dictionary=dictCorpus)
myCorpus<-tm_map(myCorpus,stemDocument)
inspect(myCorpus[1:3])
myCorpus <-tm_map(myCorpus, removeNumbers)
library(tm)
library(RWeka)
library(SnowballC)
mydata<-read.csv("paper_collection.csv")
myCorpus<-Corpus(VectorSource(mydata$Abstract))
### transformations
## lower case
myCorpus<-tm_map(myCorpus, tolower)
## remove punctuation
myCorpus <-tm_map(myCorpus, removePunctuation)
## remove numbers
myCorpus <-tm_map(myCorpus, removeNumbers)
## In many cases, workds need to be stemmed to retrieve their radicals.
dictCorpus<-myCorpus
myCorpus<-tm_map(myCorpus,stemDocument)
inspect(myCorpus[1:3])
# stem completion
myCorpus <-tm_map(myCorpus, stemCompletion, dictionary=dictCorpus)
# Document Term Matrix
myDtm <- TermDocumentMatrix(myCorpus, control=list(WordLengths=c(1,Inf)))
inspect(myDtm(266:270, 31:40))
myStopwords <-c(stopwords("english"), "available", "via")
myStopwords <-c(stopwords("english"), "available", "via")
idx <- which(myStopwords == "r")
myStopwords <- myStopwords[-idx]
myCorpus<- tm_map(myCorpus, removeWords, myStopwords)
myStopwords <-c(stopwords("english"), "available", "via", "the")
idx <- which(myStopwords == "r")
myStopwords <- myStopwords[-idx]
myCorpus<- tm_map(myCorpus, removeWords, myStopwords)
dictCorpus<-myCorpus
myCorpus<-tm_map(myCorpus,stemDocument, lazy=TRUE)
inspect(myCorpus[1:3])
library(tm)
mydata<-read.csv("paper_collection.csv")
myCorpus<-Corpus(VectorSource(mydata$Abstract))
### transformations
## lower case
myCorpus<-tm_map(myCorpus, tolower)
## remove punctuation
myCorpus <-tm_map(myCorpus, removePunctuation)
## remove numbers
myCorpus <-tm_map(myCorpus, removeNumbers)
# remove stopwords
# keep r by removing it from stopwords
myStopwords <-c(stopwords("english"), "available", "via", "the")
idx <- which(myStopwords == "r")
myStopwords <- myStopwords[-idx]
myCorpus<- tm_map(myCorpus, removeWords, myStopwords)
## In many cases, workds need to be stemmed to retrieve their radicals.
dictCorpus<-myCorpus
myCorpus<-tm_map(myCorpus,stemDocument, lazy=TRUE)
inspect(myCorpus[1:3])
# stem completion
myCorpus <-tm_map(myCorpus, stemCompletion, dictionary=dictCorpus)
a <-tm_map(myCorpus, stemCompletion, dictionary=dictCorpus)
myCorpus<-tm_map(myCorpus,stemDocument, lazy=TRUE)
inspect(myCorpus[1:3])
myCorpus<-Corpus(VectorSource(mydata$Abstract))
### transformations
## lower case
myCorpus<-tm_map(myCorpus, tolower)
## remove punctuation
myCorpus <-tm_map(myCorpus, removePunctuation)
## remove numbers
myCorpus <-tm_map(myCorpus, removeNumbers)
# remove stopwords
# keep r by removing it from stopwords
myStopwords <-c(stopwords("english"), "available", "via", "the")
idx <- which(myStopwords == "r")
myStopwords <- myStopwords[-idx]
myCorpus<- tm_map(myCorpus, removeWords, myStopwords)
## In many cases, workds need to be stemmed to retrieve their radicals.
dictCorpus<-myCorpus
myCorpus<-tm_map(myCorpus,stemDocument, lazy=TRUE)
inspect(myCorpus[1:3])
# stem completion
a <-tm_map(myCorpus, stemCompletion, dictionary=dictCorpus)
read.csv("paper_collection.csv")
mydata<-read.csv("paper_collection.csv")
View(mydata)
grep("methylation", mydata[,mydata$Abstract])
grep("methylation", mydata$Abstract])
grep("methylation", mydata$Abstract)
grepl("methylation", mydata$Abstract)
methy_selec<-mydata[!grepl("methylation", mydata$Abstract)]
methy_selec<-mydata[!grepl("methylation", mydata$Abstract),]
View(methy_selec)
grepl("methylation", mydata$Abstract, value=TRUE)
grep("methylation", mydata$Abstract, value=TRUE)
methy_selec<-mydata[!grepl("methylation|resolution", mydata$Abstract),]
methy_selec<-mydata[!grepl("methylation|resolution|[0-1000], mydata$Abstract),]
methy_selec<-mydata[!grepl("(methylation)(resolution)", mydata$Abstract),]
grepl("(?=.*methylation)(?=.*resolution)", mydata$Abstract)
grep("(?=.*methylation)(?=.*resolution)", mydata$Abstract)
grep("(?=.*methylation)", mydata$Abstract)
methy_selec<-grep("(?=.*methylation)", mydata$Abstract)
methy_selec<-grep("(methylation)", mydata$Abstract)
methy_selec<-mydata[!grepl("(resolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(.*resolution.*methylation)|(.*methylation.*resolution"), mydata$Abstract),]
methy_selec<-mydata[!grepl("(.*resolution.*methylation)|(.*methylation.*resolution))", mydata$Abstract),]
methy_selec<-mydata[!grepl("?=.*?(methylation"), mydata$Abstract),]
methy_selec<-mydata[!grepl("?=.*?(methylation"), mydata$Abstract,]
methy_selec<-mydata[!grepl("?=.*?methylation"), mydata$Abstract),]
methy_selec<-mydata[!grepl(("?=.*?methylation"), mydata$Abstract),]
methy_selec<-mydata[!grepl(("?=.*?resolution"), mydata$Abstract),]
methy_selec<-mydata[!grepl(("?=.*?(resolution"))("?=.*?(resolution")), mydata$Abstract),]
methy_selec<-mydata[!grepl((("?=.*?(resolution)")("?=.*?(resolution)")), mydata$Abstract),]
methy_selec<-mydata[!grepl((("?=.*?(resolution)")("?=.*?(resolution)"))), mydata$Abstract,]
methy_selec<-mydata[!grepl(("?=.*?(resolution))(?=.*?(resolution)"), mydata$Abstract),]
methy_selec<-mydata[(!grepl("?=.*?(resolution))(?=.*?(resolution)"), mydata$Abstract),]
methy_selec<-mydata[!grepl(("?=.*?(resolution))(?=.*?(resolution)"), mydata$Abstract),]
methy_selec<-mydata[!grepl(("?=.*?resolution)(?=.*?resolution"), mydata$Abstract),]
methy_selec<-mydata[!grepl(("?=.*?resolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("?=.*?resolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl"resolution", mydata$Abstract),]
methy_selec<-mydata[(!grepl"resolution", mydata$Abstract),]
methy_selec<-mydata[!grepl("resolution", mydata$Abstract),]
methy_selec<-mydata[!grepl("(resolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(resolution)(methylation)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(resolution)|(methylation)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(resolution)|(methylation)|(method)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(^resolution)|(methylation)|(method)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(^resolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(^[resolution])", mydata$Abstract),]
methy_selec<-mydata[!grepl("(^[rR]esolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(^[rsesolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("(rsesolution)", mydata$Abstract),]
methy_selec<-mydata[!grepl("rsesolution", mydata$Abstract),]
methy_selec<-mydata[!grepl("test", mydata$Abstract),]
methy_selec<-mydata[!grepl("tet", mydata$Abstract),]
methy_selec<-mydata[!grepl("tesit", mydata$Abstract),]
methy_selec<-grep("(methylation)", mydata$Abstract)
methy_selec<-grep("(methylation)", mydata$Abstract)
mydata[!grepl("test", mydata$Abstract),]
methy_selec<-mydata[!grepl("test", mydata$Abstract),]
View(methy_selec)
methy_selec<-mydata[!grepl("review", mydata$Abstract),]
methy_selec<-mydata[!grepl("(?=.*resolution)(?=.*methylation)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[!grepl("(?=.*resolution)(?=.*methylation)(?=.*asdfsdf)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*methylation)(?=.*asdfsdf)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*methylation)", mydata$Abstract, perl=TRUE),]
View(methy_selec)
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*methylation)(?=.*method)", mydata$Abstract, perl=TRUE),]
View(methy_selec)
methy_selec<-mydata[grepl("(?=.*DNA.resolution)(?=.*methylation)(?=.*method)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*DNA/.resolution)(?=.*methylation)(?=.*method)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*DNA resolution)(?=.*methylation)(?=.*method)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*methylation)(?=.*method)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*methylation)(?=.*method)(?=.*antibody)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*methylation)(?=.*method)(?=.*Antibody)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*Antibody)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*[Aa]ntibody)", mydata$Abstract, perl=TRUE),]
View(methy_selec)
methy_selec<-mydata[grepl("(?=.*[Rr]esolution)(?=.*[Aa]ntibody)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*[Mm]ethylation)(?=.*method)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*resolution)(?=.*[Mm]ethylation)(?=.*[Mm]ethod)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*[Rr]esolution)(?=.*[Mm]ethylation)(?=.*[Mm]ethod)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*[Rr]esolution)(?=.*[Mm]ethylation)(?=.*[Mm]ethod)(?=.*[Ss]equenc)", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*[Rr]esolution)(?=.*[Mm]ethylation)(?=.*[Mm]ethod)(?=.*[Ss]equenc)(?=.*[1-9]", mydata$Abstract, perl=TRUE),]
methy_selec<-mydata[grepl("(?=.*[Rr]esolution)(?=.*[Mm]ethylation)(?=.*[Mm]ethod)(?=.*[Ss]equenc)(?=.*[1-9])", mydata$Abstract, perl=TRUE),]
View(methy_selec)
write(methy_selec, "text.csv")
write.csv(methy_selec, "text.csv")
doubles<-[duplicated(mydata),]
doubles<-mydata[duplicated(mydata),]
View(doubles)
doubles<-methy_selec[duplicated(methy_selec),]
View(doubles)
doubles<-methy_selec[!duplicated(methy_selec),]
View(methy_selec)
doubles<-methy_selec[!duplicated(methy_selec[,1]),]
View(doubles)
doubles<-methy_selec[duplicated(methy_selec[,1]),]
View(doubles)
doubles<-methy_selec[!duplicated(methy_selec[,1]),]
View(methy_selec)
View(doubles)
View(doubles)
doubles<-methy_selec[duplicated(methy_selec[,1]),]
View(doubles)
cleanDoubles<-methy_selec[!duplicated(methy_selec[,1]),]
View(cleanDoubles)
cleanDoubles<-mydata[!duplicated(mydata[,1]),]
View(cleanDoubles)
files <-list.files('01_csv', pattern='*.csv',full.names=F, recursive=FALSE)
# loop over the vector and combine csv files into one file
mydata<-data.frame()
print ('start binding')
for(i in seq_along(files)){
print (paste('binding file', i))
path<-paste('01_csv/', files[i], sep='')
data<-read.csv2(path, header=T) # load the file
mydata <-rbind(data, mydata)
}
## take out the redudandte journals
mydata<-mydata[!duplicated(mydata[,1]),]
print ('end binding file')
#### writing into file
mydate<-Sys.Date()
filename= paste("search_results_combined_", mydate, '.csv', sep='')
write.csv(cleanDoubles, filename, row.names=FALSE)
View(methy_selec)
View(methy_selec)
650*2/7
install.packaees("limma")
source("https://bioconductor.org/bioclite.R")
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
sum(mydata)
summar()
sum()
View(mydata)
