byJournal<- group_by(myJou,Journal)
View(byJournal)
summarise(byJournal)
summarise(byJournal, mean(Citations))
summarise(byJournal, mean(Citations, max(YearPpublish())))
summarise(byJournal, mean(Citations, max(YearPpublish))
summarise(byJournal, mean(Citations, max(YearPpublish))
summarise(byJournal, mean(Citations), max(YearPpublish))
summarise(byJournal, mean(Citations), max(YearPubmed))
z<-summarise(byJournal, mean(Citations), max(YearPubmed))
z
View(z)
summary(z)
z
sort(z, z$`mean(Citations)`)
sort(z, z$`mean(Citations)`)
sort(z, z$`mean(Citations)`)
z[order$Mean(citation)]
z[order$Mean(citation),]
z[order(mean(Citations)),]
z[order(mean(order[2]),]
z[order(mean(Citations)),]
z[order(z$`mean(Citations)`,]
z$`mean(Citations)
z$mean(Citations)
z
z$Journal
z$`mean(Citations)`
z$`mean(Citations)`
order(z, z$`mean(Citations)`)
order(z[z$`mean(Citations),]`)
z[order(z$`mean(Citations)`),]
z[order(-z$`mean(Citations)`),]
Jsort<-z[order(-z$`mean(Citations)`),]
Jsort
View(Jsort)
plot(Jsort$`max(YearPubmed)`, jsort$mean(Citations))
plot(Jsort$`max(YearPubmed)`, Jsort$`mean(Citations)`)
p<-plot(Jsort$`max(YearPubmed)`, Jsort$`mean(Citations)`)
View(mydata)
mydata<-read.csv("Analys.csv", header=TRUE)
View(mydata)
as.data.frame(gsub('//C','',mydata$Journal, fixed=TRUE))
mydata1<-mydata
View(mydata1)
mydata1[,4]<-gsub('\\C', '', mydata1$Journal)
mydata1[,4]<-gsub('\\)', '', mydata1$Journal)
View(mydata1)
View(mydata)
View(mydata1)
View(mydata)
mydata1[,4]<-gsub('\\(', '', mydata1$Journal)
mydata1[,4]<-gsub('\\(', '', mydata$Journal)
mydata1[,4]<-gsub('\\(', '', mydata$Journal)
View(mydata1)
mydata1[,4]<-gsub('\\)', '', mydata$Journal)
View(mydata1)
mydata1[,4]<-gsub('\\(', '', mydata1$Journal)
View(mydata1)
n=0
jcount1<-data.frame()
a<-as.character(levels(mydata1[,4]))
jc<-function(x){
sumJ<-sum(str_count(as.character(mydata1[,4]), as.character(x)))
n<<-n+1
print (n)
jcount1<<-rbind(jcount, cbind(x,sumJ))
#print(paste('Journal=', x, 'Sum=', sumJ))
}
lapply(a, jc)
lapply(a, jc)
a<-as.character(levels(mydata1[,4]))
mydata1[,4]
levels(mydata1[,4])
length(mydata1$Journal)
levels(mydata1$Journal)
a<-mydata1$Journal
a
sort(a)
class(a)
a<-as.factor(a)
a
a
a<-as.character(levels(a))
a
lapply(a, jc)
library(data.table)
library(stringr)
library(dplyr)
lapply(a, jc)
jcount1<-data.frame()
a<-as.character(levels(a))
jc<-function(x){
sumJ<-sum(str_count(as.character(mydata1[,4]), as.character(x)))
n<<-n+1
print (n)
jcount1<<-rbind(jcount, cbind(x,sumJ))
#print(paste('Journal=', x, 'Sum=', sumJ))
}
lapply(a, jc)
a<-mydata1[,4]
a
class(a)
a<-as.factor(a)
a
a<-levels(a)
a
a<-as.character(a)
a
class(a)
lapply(a, jc)
jc<-function(x){
sumJ<-sum(str_count(as.character(mydata1[,4]), as.character(x)))
n<<-n+1
print (n)
jcount1<<-rbind(jcount1, cbind(x,sumJ))
#print(paste('Journal=', x, 'Sum=', sumJ))
}
lapply(a, jc)
View(jcount1)
jcount1<-jcount1 %>% arrange(desc(as.numeric(as.character(sumJ))), x)
View(jcount1)
hist(jcount1$sumJ)
hist(as.numeric(jcount1$sumJ)
hist(as.numeric(jcount1$sumJ))
hist.default(as.numeric(jcounts$SumJ),break=10)
hist.default(as.numeric(jcounts$SumJ),breaks=10)
hist.default(as.numeric(jcount$SumJ),breaks=10)
hist.default(as.numeric(jcount$sumJ),breaks=10)
jcount
hist.default(as.numeric(jcount1$sumJ),breaks=10)
hist.default(as.numeric(jcount1$sumJ),breaks=100)
hist.default(as.numeric(jcount1$sumJ),breaks=500)
hist.default(as.numeric(jcount1$sumJ),breaks=1100)
hist.default(as.numeric(jcount1$sumJ),breaks=1)
hist.default(as.numeric(jcount1$sumJ),breaks=5)
hist.default(as.numeric(jcount1$sumJ),breaks=50)
mydata1[,4]<-gsub('\\(', '', mydata1$Journal)
grep('software', mydata1$Title|mydata1$Abstract)
grep('software', as.characters(mydata1$Title)|as.characters(mydata1$Abstract))
grep('software', as.character(mydata1$Title)|as.character(mydata1$Abstract))
grep('software', as.character(mydata1$Abstract))
grep('software', as.character(mydata1$Abstract), value=TRUE)
grepl('software', as.character(mydata1$Abstract), value=TRUE)
grepl('software', as.character(mydata1$Abstract), value=FALSE)
table(grepl('software', as.character(mydata1$Abstract), value=FALSE))
table(grepl('software', as.character(mydata1$Abstract)))
table(grepl('software package', as.character(mydata1$Abstract)))
table(grepl('protocol', as.character(mydata1$Abstract)))
table(grepl('sequence', as.character(mydata1$Abstract)))
table(grepl('method', as.character(mydata1$Abstract)))
table(grepl('sequencing', as.character(mydata1$Abstract)))
table(grepl('sequencing|sequence', as.character(mydata1$Abstract)))
table(grepl('DNA', as.character(mydata1$Abstract)))
table(grepl('DNA|RNA', as.character(mydata1$Abstract)))
table(grepl('DNA|RNA|sequence|sequencing', as.character(mydata1$Abstract)))
table(grepl('WGBS', as.character(mydata1$Abstract)))
able(grepl('DNA + RNA', as.character(mydata1$Abstract)))
table(grepl('DNA + RNA', as.character(mydata1$Abstract)))
table(grepl('DNA + RNA', as.character(mydata1$Abstract)))
table(grepl('DNA AND RNA', as.character(mydata1$Abstract)))
table(grepl('DNA && RNA', as.character(mydata1$Abstract)))
table(grepl('DNA & RNA', as.character(mydata1$Abstract)))
table(grepl('The & is', as.character(mydata1$Abstract)))
table(grepl('The && is', as.character(mydata1$Abstract)))
table(grepl('The | is', as.character(mydata1$Abstract)))
table(grepl('a', as.character(mydata1$Abstract)))
table(grepl('a|the|is', as.character(mydata1$Abstract)))
table(grepl('a|DNAs', as.character(mydata1$Abstract)))
table(grepl('a | DNA', as.character(mydata1$Abstract)))
table(grepl('RNA|DNA', as.character(mydata1$Abstract)))
table(grepl('DNA', as.character(mydata1$Abstract)))
table(grepl('is|DNA', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|the', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|with', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|of', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|abstract', as.character(mydata1$Abstract)))
table(grepl('test', as.character(mydata1$Abstract)))
source(main.R)
main(12,13)
source("main.R")
main(12,13)
main(12,13)
title: "Decison Tree"
# This scripts reads search expression from the csv and calls pubmed_search function
main<-function(start=1, en=3){
library(RISmed)
library(dplyr)
# select search term in sequence_methods.csv sheet by start and end row
print(paste('Start:', start, " End:", en))
print("start Pubmed search")
con <-file("sequencing_methods.csv")
data <- read.csv(con)[,3:4]
m=start
# starting point, e.g. 3 row in the csv file.
for (n in seq_along(data[,1])) {
if (n>=m ) {
print (paste('id:', n, 'query: ', (data[n,2])))
#print (paste('count', i, data[n]))
### Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(data[n,2], data[n,1])
}
}
}
print("End Utilities")
}
main()
main(3,4)
main(3,4)
main(3,4)
main()
View(main)
# This scripts reads search expression from the csv and calls pubmed_search function
main<-function(start=1, en=3){
library(RISmed)
library(dplyr)
# Retrievs method and search term from sequence_methods.csv using rownumbers start and end.
print(paste('Start:', start, " End:", en))
print("start PubMed search")
con <-file("sequencing_methods.csv")
search_term <- read.csv(con)[,3:4]
# loops through the search terms.
for (n in seq_along(data[,1])) {
m=start
if (n>=m ) {  # m determines start
print (paste('id:', n, 'query: ', (search_term[n,2])))
# Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
}
}
}
print("end PubMed search")
}
main(3,4)
source(main.R)
source("main.R")
main(3,4)
source("main.R")
main(3,4)
main(3,4)
source("main.R")
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(2,4)
source("main.R")
main(2,4)
search_term <- read.csv(con)[,3:4]
length(search_term)
search_term
con <-file("sequencing_methods.csv")
search_term <- read.csv(con)[,3:4]
search_term
source("main.R")
main(2,4)
source("main.R")
main(2,4)
main(2,4)
source("main.R")
main(2,4)
source("main.R")
main(2,4)
source("main.R")
main(2,4)
print('')
print(' ')
print()
print
print'____'
print('_____')
print('hall')
source("main.R")
main(2,4)
source("main.R")
main(2,4)
main(2,4)
main(2,4)
main(2,4)
main(2,4)
main(1,4)
write.csv(jcount1, "journal_distribution.csv")
View(mydata)
View(mydata1)
read.csv('analysis.csv')
Analysis <- read.csv("~/DecisionTreeSequencingMethods/Analysis.csv")
View(Analysis)
View(Analysis)
gsub('\\(', '', Analysis$Journal)
rankedJournals<-read.csv(con)[, c(1,2,3,5)]
con <-"2014_SCI_IF.csv"
a<-rankedJournals[,2]
rankedJournals<-read.csv(con)[, c(1,2,3,5)]
a<-rankedJournals[,2]
a[1:10]
b<-data.frame(lappply(a[1:10], function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b<-data.frame(lapply(a[1:10], function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a
a[1:10]
b
a<-c("HHHH")
b<-data.frame(lapply(a[1:10], function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a<-rankedJournals[,2]
a(1:10)
a
a(c(1:10))
a[[1:10]]
a[1:10]
class(a)
a<-c(a[1:10])
a
as.character(a[1:10])
a
a<-rankedJournals[,2]
a
as.character(a[1:10])
a<-rankedJournals[,2]
df<-mutate_each(rankedJournals[,2], funs(toupper))
b<-data.frame(lapply(as.character(a[1:10]), function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a
b
toupper()
a<-rankedJournals[,2]
b<-data.frame(lapply(as.character(a[1:10]), function(v) {
if (is.character(v)) return(toupper(v))
else return(v)
}))
b
a<-rankedJournals[,2]
b<-data.frame(lapply(as.character(a[1:10]), function(v) {
if (is.character(v)) return(tolower(v))
else return(v)
}))
b
a
a[1:20]
a<-as.character(rankedJournals[,2])
c<-lapply(a, tolower())
c<-lapply(a, tolower(x))
c<-lapply(a, tolower
c<-lapply(a, tolower)
c
a<-as.character(rankedJournals[,2])
c<-lapply(a, tolower)
z
a
b<-rankedJournals
b[,2]<-tolower(as.character(b[,2]))
b
header(b)
head(b)
b[,2]<-tolower(as.character(b[,2]))
b[,2]
analysis <- read.csv("~/DecisionTreeSequencingMethods/analysis.csv")
View(analysis)
a<-read.csv("analysis.csv")
View(analysis)
a[,4]<-tolower(as.character(a[,4]))
head(a)
library(plyr)
head(b)
head(a)
head(b)
names(b[c(2)])
names(b[c(2)])<-Journal
names(b[c(2)])<-"Journal"
head(b)
names(b[c(2)])<-"Journal"
head(b)
names(b[c(2)])
colnames(b[c(2)])
colnames(b[c(2)])<-"Journal"
colnames(b[c(2)])
colnames(b)
colnames(b)[2]
colnames(b)[2]<-"Journal"
colnames(b)[2]
arrange(join(a,b), Journal)
test<-arrange(join(a,b), Journal)
View(test)
names(test)
test<-test([,c(1,4,10,11,9,5,2,3,6,7,8)])
test<-test[,c(1,4,10,11,9,5,2,3,6,7,8)]
test<-arrange(test, desc(Journal.Impact.Factor))
test
View(test)
View(test)
View(test)
b<-rankedJournals
b[,2]<-tolower(as.character(b[,2]))
colnames(b)[2]<-"Journal"
a<-read.csv("analysis.csv")
a[,4]<-tolower(as.character(a[,4]))
mydata_merged<-arrange(join(a,b), Journal)
mydata_merged<-mydata_merged[,c(1,4,10,11,9,5,2,3,6,7,8)]
test<-test[,c(1,4,10,11,9,5,2,3,6,7,8)]
cat("nature methods", mydata_merged)
write.csv2(mydata_merged, "analysis_merged.csv")
View(b)
b<-arrange(b, asc(Journal))
b<-arrange(b, Journal)
a<-arrange(a, Journal)
View(a)
View(b)
View(mydata_merged)
main(1,3)
source("main.r")
main(1,3)
main(2,3)
ngs_search <- EUtilsSummary(query, type="esearch",db = "pubmed",mindate=2000, maxdate=2015, retmax=30000)
search_term <- read.csv(con)[start:en,3:4]
start<-2
end<-3
search_term <- read.csv(con)[start:en,3:4]
en<-3
search_term <- read.csv(con)[start:en,3:4]
# loops through the search terms.
for (n in seq_along(search_term[,1])) {
# Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
}
print("end retrieving search terms")
}
con <-file("sequencing_methods.csv")
start<-2
en<-3
search_term <- read.csv(con)[start:en,3:4]
# loops through the search terms.
for (n in seq_along(search_term[,1])) {
# Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
}
print("end retrieving search terms")
}
print("end PubMed search")
}
query <- SearchExpression
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
query <- SearchExpression
search_term <- read.csv(con)[start:en,3:4]
start<-2
en<-3
search_term <- read.csv(con)[start:en,3:4]
View(search_term)
library(RISmed)
library(dplyr)
# Retrievs method and search term from sequence_methods.csv using rownumbers start and end.
print("========>>>>  retrieving search terms from sequencing_methods.csv")
con <-file("sequencing_methods.csv")
start<-2
en<-3
search_term <- read.csv(con)[start:en,3:4]
query<-reChip-seq
ngs_search <- EUtilsSummary(query, type="esearch",db = "pubmed",mindate=2000, maxdate=2015, retmax=30000)
query<-"reChip-seq"
ngs_search <- EUtilsSummary(query, type="esearch",db = "pubmed",mindate=2000, maxdate=2015, retmax=30000)
QueryCount(ngs_search)
print (paste0(Sys.time(),':   ', QueryCount(ngs_search),' hits'))
ngs_records <- EUtilsGet(ngs_search)
YearPubmed(ngs_records)
MedlienTA(ngs_records)
MedlineTA(ngs_records)
Medline(ngs_records)
Volume(ngs_records)
ngs_records
Title(ngs_records)
MedlineTA(ngs_records)
main(1,5)
source("main.R")
main(1,5)
main(2,4)
main(3,4)
main(3,4)
source("main.R")
main(3,4)
main(1,4)
main(3,4)
main(3,4)
main(2,20)
main(12,20)
main(19,20)
main(20,30)
