print("End Utilities")
}
# This scripts reads search expression from the csv and calls pubmed_search function
main<-function(start=1, end=3){
library(RISmed)
library(dplyr)
print("start Pubmed search")
con <-file("sequencing_methods.csv")
data <- read.csv(con)[,3:4]
n=start
# starting point, e.g. 3 row in the csv file.
for (i in seq_along(data[,1])) {
n=n+1
print (paste('id: ', n, 'query: ', (data[n,2])))
#print (paste('count', i, data[n]))
if (n<end) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(data[n,2], data[n,1])
}
}
print("End Utilities")
}
main()
main()
main(1,4)
main(1,4)
main(1,4)
main(1,4)
main(1,4)
main()
main()
main()
source(main.R)
source("main.R")
main()
source("main.R")
main()
main(1, 4)
main(12, 30)
source('main.R')
main()
source('main.R')
main(4,6)
source('main.R')
main()
main(4,6)
source('main.R')
main()
source('main.R')
main()
source('main.R')
main()
main(4,6)
source('main.R')
main(4,6)
source('main.R')
main(4,6)
main(4,5)
main(42,45)
# Combining search results into on file
# collecting file and store then in a vector
files <-list.files('01_csv', pattern='*.csv',full.names=F, recursive=FALSE)
# loop over the vector and combine csv files into one file
mydata<-data.frame()
print ('start binding')
for(i in seq_along(files)){
print (paste('binding file', i))
path<-paste('01_csv/', files[i], sep='')
data<-read.csv(path, header=T) # load the file
mydata <-rbind(data, mydata)
}
print ('end binding file')
#### writing into file
mydate<-Sys.Date()
filename= paste("search_results_combined", mydata, '.csv', sep='')
write.csv(mydata, filename, row.names=FALSE)
# Combining search results into on file
# collecting file and store then in a vector
files <-list.files('01_csv', pattern='*.csv',full.names=F, recursive=FALSE)
# loop over the vector and combine csv files into one file
mydata<-data.frame()
print ('start binding')
for(i in seq_along(files)){
print (paste('binding file', i))
path<-paste('01_csv/', files[i], sep='')
data<-read.csv(path, header=T) # load the file
mydata <-rbind(data, mydata)
}
print ('end binding file')
#### writing into file
mydate<-Sys.Date()
filename= paste("search_results_combined", mydata, '.csv', sep='')
filename= paste("search_results_combined", mydate, '.csv', sep='')
filename= paste("search_results_combined_", mydate, '.csv', sep='')
write.csv(mydata, filename, row.names=FALSE)
# Combining search results into on file
# collecting file and store then in a vector
files <-list.files('01_csv', pattern='*.csv',full.names=F, recursive=FALSE)
# loop over the vector and combine csv files into one file
mydata<-data.frame()
print ('start binding')
for(i in seq_along(files)){
print (paste('binding file', i))
path<-paste('01_csv/', files[i], sep='')
data<-read.csv2(path, header=T) # load the file
mydata <-rbind(data, mydata)
}
print ('end binding file')
#### writing into file
mydate<-Sys.Date()
filename= paste("search_results_combined_", mydate, '.csv', sep='')
write.csv(mydata, filename, row.names=FALSE)
hist(mydata$Method, mydata$Journal)
hist(mydata$YearPubmed, mydata$Citations)
hist
hist( mydata$Citations)
plot(mydata$YearPubmed, mydata$Citations)
mydata$Method
hist(mydata$Method)
journals<-mydata$Method
journals
length(journals)
sum(journals)
journals
journals<-mydata$Journal
journals
library(dplyr)
mydata[mydata$Method %>% journals]
mydata[mydata$Method %>% journals, ]
journals
mydata[mydata$Method %in% journals, ]
ftable(mydata)
tapply(mydata$journal, mydata$Method, sum)
tapply(mydata$journal, mydata$Method, sum)
count(mydata$journal)
group_by(mydata$Method, journals)
group_by(mydata, Journal)
group_by(mydata, Journal, Citations)
group_by(mydata, Journal, Citations)
sumary(mydata)
summary(mydata)
length(mydata$Journal == journals)
length(mydata$Journal == "Bioinformatics")
length(mydata$Journal)
journals
count(journals)
levels(journals)
hist(journals)
journals
length(journals)
as.factor(journals)
journals
hist(table(as.factor(journals)), freg=TRUE, xlab=levels(as.factor(journals)), ylab = 'count')
fac<--as.factor(journals)
journals
as.factor(journals)
a<- as.factor(journals)
barplot(prop.table(table(journals)))
barplot(prop.table(table(journals)))
barplot()
bbarplot
barplot
journals == "WGBS"
a<-journals == "WGBS"
a
as.numeric(a)
sum(as.numeric(a))
journal
journals
as.numeric(journals)
a<-as.numeric(journals)
hist(a)
hist(a[1:100])
a[1:10]
lapply(a, a==1)
lapply(a, function{a==1})
a
sort (a)
hist(a)
hist(a[1:10])
plot(a)
plot(a[1:10])
a[1:10]
a<-sort(a)
a
hist(a[1:100])
hist(a[1:10])
plot(a[1:10])
a[1:10]
a[1:1000]
b<-a[1:200]
hist(b)
hist(b, break=5, col="red")
b
a
a[1:400]
b
mydata
myJou<-mydata[,c(1:7)]
View(myJou)
myJou<-mydata[,c(1:6)]
summary(myJou)
group_by(.myJou, myJou$Method)
group_by(myJou, myJou$Method)
group_by(myJou$Method)
group_by(myJou, Method)
group_by(myJou, Journal)
myJou
byJournal<- group_by(myjour,journals)
byJournal<- group_by(myJour,journals)
byJournal<- group_by(myjou,journals)
byJournal<- group_by(myJou,journals)
byJournal<- group_by(myJou,journal)
byJournal<- group_by(myJou,Journal)
View(byJournal)
summarise(byJournal)
summarise(byJournal, mean(Citations))
summarise(byJournal, mean(Citations, max(YearPpublish())))
summarise(byJournal, mean(Citations, max(YearPpublish))
summarise(byJournal, mean(Citations, max(YearPpublish))
summarise(byJournal, mean(Citations), max(YearPpublish))
summarise(byJournal, mean(Citations), max(YearPubmed))
z<-summarise(byJournal, mean(Citations), max(YearPubmed))
z
View(z)
summary(z)
z
sort(z, z$`mean(Citations)`)
sort(z, z$`mean(Citations)`)
sort(z, z$`mean(Citations)`)
z[order$Mean(citation)]
z[order$Mean(citation),]
z[order(mean(Citations)),]
z[order(mean(order[2]),]
z[order(mean(Citations)),]
z[order(z$`mean(Citations)`,]
z$`mean(Citations)
z$mean(Citations)
z
z$Journal
z$`mean(Citations)`
z$`mean(Citations)`
order(z, z$`mean(Citations)`)
order(z[z$`mean(Citations),]`)
z[order(z$`mean(Citations)`),]
z[order(-z$`mean(Citations)`),]
Jsort<-z[order(-z$`mean(Citations)`),]
Jsort
View(Jsort)
plot(Jsort$`max(YearPubmed)`, jsort$mean(Citations))
plot(Jsort$`max(YearPubmed)`, Jsort$`mean(Citations)`)
p<-plot(Jsort$`max(YearPubmed)`, Jsort$`mean(Citations)`)
View(mydata)
mydata<-read.csv("Analys.csv", header=TRUE)
View(mydata)
as.data.frame(gsub('//C','',mydata$Journal, fixed=TRUE))
mydata1<-mydata
View(mydata1)
mydata1[,4]<-gsub('\\C', '', mydata1$Journal)
mydata1[,4]<-gsub('\\)', '', mydata1$Journal)
View(mydata1)
View(mydata)
View(mydata1)
View(mydata)
mydata1[,4]<-gsub('\\(', '', mydata1$Journal)
mydata1[,4]<-gsub('\\(', '', mydata$Journal)
mydata1[,4]<-gsub('\\(', '', mydata$Journal)
View(mydata1)
mydata1[,4]<-gsub('\\)', '', mydata$Journal)
View(mydata1)
mydata1[,4]<-gsub('\\(', '', mydata1$Journal)
View(mydata1)
n=0
jcount1<-data.frame()
a<-as.character(levels(mydata1[,4]))
jc<-function(x){
sumJ<-sum(str_count(as.character(mydata1[,4]), as.character(x)))
n<<-n+1
print (n)
jcount1<<-rbind(jcount, cbind(x,sumJ))
#print(paste('Journal=', x, 'Sum=', sumJ))
}
lapply(a, jc)
lapply(a, jc)
a<-as.character(levels(mydata1[,4]))
mydata1[,4]
levels(mydata1[,4])
length(mydata1$Journal)
levels(mydata1$Journal)
a<-mydata1$Journal
a
sort(a)
class(a)
a<-as.factor(a)
a
a
a<-as.character(levels(a))
a
lapply(a, jc)
library(data.table)
library(stringr)
library(dplyr)
lapply(a, jc)
jcount1<-data.frame()
a<-as.character(levels(a))
jc<-function(x){
sumJ<-sum(str_count(as.character(mydata1[,4]), as.character(x)))
n<<-n+1
print (n)
jcount1<<-rbind(jcount, cbind(x,sumJ))
#print(paste('Journal=', x, 'Sum=', sumJ))
}
lapply(a, jc)
a<-mydata1[,4]
a
class(a)
a<-as.factor(a)
a
a<-levels(a)
a
a<-as.character(a)
a
class(a)
lapply(a, jc)
jc<-function(x){
sumJ<-sum(str_count(as.character(mydata1[,4]), as.character(x)))
n<<-n+1
print (n)
jcount1<<-rbind(jcount1, cbind(x,sumJ))
#print(paste('Journal=', x, 'Sum=', sumJ))
}
lapply(a, jc)
View(jcount1)
jcount1<-jcount1 %>% arrange(desc(as.numeric(as.character(sumJ))), x)
View(jcount1)
hist(jcount1$sumJ)
hist(as.numeric(jcount1$sumJ)
hist(as.numeric(jcount1$sumJ))
hist.default(as.numeric(jcounts$SumJ),break=10)
hist.default(as.numeric(jcounts$SumJ),breaks=10)
hist.default(as.numeric(jcount$SumJ),breaks=10)
hist.default(as.numeric(jcount$sumJ),breaks=10)
jcount
hist.default(as.numeric(jcount1$sumJ),breaks=10)
hist.default(as.numeric(jcount1$sumJ),breaks=100)
hist.default(as.numeric(jcount1$sumJ),breaks=500)
hist.default(as.numeric(jcount1$sumJ),breaks=1100)
hist.default(as.numeric(jcount1$sumJ),breaks=1)
hist.default(as.numeric(jcount1$sumJ),breaks=5)
hist.default(as.numeric(jcount1$sumJ),breaks=50)
mydata1[,4]<-gsub('\\(', '', mydata1$Journal)
grep('software', mydata1$Title|mydata1$Abstract)
grep('software', as.characters(mydata1$Title)|as.characters(mydata1$Abstract))
grep('software', as.character(mydata1$Title)|as.character(mydata1$Abstract))
grep('software', as.character(mydata1$Abstract))
grep('software', as.character(mydata1$Abstract), value=TRUE)
grepl('software', as.character(mydata1$Abstract), value=TRUE)
grepl('software', as.character(mydata1$Abstract), value=FALSE)
table(grepl('software', as.character(mydata1$Abstract), value=FALSE))
table(grepl('software', as.character(mydata1$Abstract)))
table(grepl('software package', as.character(mydata1$Abstract)))
table(grepl('protocol', as.character(mydata1$Abstract)))
table(grepl('sequence', as.character(mydata1$Abstract)))
table(grepl('method', as.character(mydata1$Abstract)))
table(grepl('sequencing', as.character(mydata1$Abstract)))
table(grepl('sequencing|sequence', as.character(mydata1$Abstract)))
table(grepl('DNA', as.character(mydata1$Abstract)))
table(grepl('DNA|RNA', as.character(mydata1$Abstract)))
table(grepl('DNA|RNA|sequence|sequencing', as.character(mydata1$Abstract)))
table(grepl('WGBS', as.character(mydata1$Abstract)))
able(grepl('DNA + RNA', as.character(mydata1$Abstract)))
table(grepl('DNA + RNA', as.character(mydata1$Abstract)))
table(grepl('DNA + RNA', as.character(mydata1$Abstract)))
table(grepl('DNA AND RNA', as.character(mydata1$Abstract)))
table(grepl('DNA && RNA', as.character(mydata1$Abstract)))
table(grepl('DNA & RNA', as.character(mydata1$Abstract)))
table(grepl('The & is', as.character(mydata1$Abstract)))
table(grepl('The && is', as.character(mydata1$Abstract)))
table(grepl('The | is', as.character(mydata1$Abstract)))
table(grepl('a', as.character(mydata1$Abstract)))
table(grepl('a|the|is', as.character(mydata1$Abstract)))
table(grepl('a|DNAs', as.character(mydata1$Abstract)))
table(grepl('a | DNA', as.character(mydata1$Abstract)))
table(grepl('RNA|DNA', as.character(mydata1$Abstract)))
table(grepl('DNA', as.character(mydata1$Abstract)))
table(grepl('is|DNA', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|the', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|with', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|of', as.character(mydata1$Abstract)))
table(grepl('is|DNA|a|abstract', as.character(mydata1$Abstract)))
table(grepl('test', as.character(mydata1$Abstract)))
source(main.R)
main(12,13)
source("main.R")
main(12,13)
main(12,13)
title: "Decison Tree"
# This scripts reads search expression from the csv and calls pubmed_search function
main<-function(start=1, en=3){
library(RISmed)
library(dplyr)
# select search term in sequence_methods.csv sheet by start and end row
print(paste('Start:', start, " End:", en))
print("start Pubmed search")
con <-file("sequencing_methods.csv")
data <- read.csv(con)[,3:4]
m=start
# starting point, e.g. 3 row in the csv file.
for (n in seq_along(data[,1])) {
if (n>=m ) {
print (paste('id:', n, 'query: ', (data[n,2])))
#print (paste('count', i, data[n]))
### Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(data[n,2], data[n,1])
}
}
}
print("End Utilities")
}
main()
main(3,4)
main(3,4)
main(3,4)
main()
View(main)
# This scripts reads search expression from the csv and calls pubmed_search function
main<-function(start=1, en=3){
library(RISmed)
library(dplyr)
# Retrievs method and search term from sequence_methods.csv using rownumbers start and end.
print(paste('Start:', start, " End:", en))
print("start PubMed search")
con <-file("sequencing_methods.csv")
search_term <- read.csv(con)[,3:4]
# loops through the search terms.
for (n in seq_along(data[,1])) {
m=start
if (n>=m ) {  # m determines start
print (paste('id:', n, 'query: ', (search_term[n,2])))
# Call function to download the data set from pubmed
if (n<=en) {  # termination point, e.g. row 5
pubmed_search<-dget("pubmed_datafetch.R")
pubmed_search(search_term[n,2], search_term[n,1])
}
}
}
print("end PubMed search")
}
main(3,4)
source(main.R)
source("main.R")
main(3,4)
source("main.R")
main(3,4)
main(3,4)
source("main.R")
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(3,4)
main(2,4)
source("main.R")
main(2,4)
search_term <- read.csv(con)[,3:4]
length(search_term)
search_term
con <-file("sequencing_methods.csv")
search_term <- read.csv(con)[,3:4]
search_term
source("main.R")
main(2,4)
source("main.R")
main(2,4)
main(2,4)
source("main.R")
main(2,4)
source("main.R")
main(2,4)
source("main.R")
main(2,4)
print('')
print(' ')
print()
print
print'____'
print('_____')
print('hall')
source("main.R")
main(2,4)
source("main.R")
main(2,4)
main(2,4)
main(2,4)
main(2,4)
main(2,4)
main(1,4)
write.csv(jcount1, "journal_distribution.csv")
View(mydata)
View(mydata1)
read.csv('analysis.csv')
Analysis <- read.csv("~/DecisionTreeSequencingMethods/Analysis.csv")
View(Analysis)
View(Analysis)
gsub('\\(', '', Analysis$Journal)
